/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cube004: THREE.Mesh;
    Cube004_1: THREE.Mesh;
    Cube005: THREE.Mesh;
    Cube005_1: THREE.Mesh;
    ControlsLeft: THREE.Mesh;
    ButtonRight: THREE.Mesh;
    ControlsBottom: THREE.Mesh;
  };
  materials: {
    Border: THREE.MeshStandardMaterial;
    Screen: THREE.MeshStandardMaterial;
    Superstructure: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/console.gltf") as unknown as GLTFResult;
  return (
    <group castShadow {...props} dispose={null} position={[0, -1, 0]}>
      <mesh castShadow geometry={nodes.Cube004.geometry} material={materials.Border} />
      <mesh castShadow geometry={nodes.Cube004_1.geometry} material={materials.Screen} />
      <mesh castShadow geometry={nodes.Cube005.geometry} material={materials.Superstructure} />
      <mesh castShadow geometry={nodes.Cube005_1.geometry} material={materials.Border} />
      <mesh castShadow geometry={nodes.ControlsLeft.geometry} material={materials.Border} />
      <mesh castShadow geometry={nodes.ButtonRight.geometry} material={materials.Border} />
      <mesh castShadow geometry={nodes.ControlsBottom.geometry} material={materials.Border} />
    </group>
  );
}

useGLTF.preload("/console.gltf");
